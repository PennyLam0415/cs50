#include <cs50.h>
#include <stdio.h>
#include <string.h>

// Max voters and candidates
#define MAX_VOTERS 100
#define MAX_CANDIDATES 9

// preferences[i][j] is jth preference for voter i
int preferences[MAX_VOTERS][MAX_CANDIDATES];

// Candidates have name, vote count, eliminated status
typedef struct
{
    string name;
    int votes;
    bool eliminated;
}
candidate;

// Array of candidates
candidate candidates[MAX_CANDIDATES];

// Numbers of voters and candidates
int voter_count;
int candidate_count;

// Function prototypes
bool vote(int voter, int rank, string name);
void tabulate(void);
bool print_winner(void);
int find_min(void);
bool is_tie(int min);
void eliminate(int min);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: runoff [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX_CANDIDATES)
    {
        printf("Maximum number of candidates is %i\n", MAX_CANDIDATES);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i].name = argv[i + 1];
        candidates[i].votes = 0;
        candidates[i].eliminated = false;
    }

    voter_count = get_int("Number of voters: ");
    if (voter_count > MAX_VOTERS)
    {
        printf("Maximum number of voters is %i\n", MAX_VOTERS);
        return 3;
    }

    // Keep querying for votes
    // 可想像成一個矩陣, 由voter1的第一名問到voterN的最後一名
    for (int i = 0; i < voter_count; i++)
    {

        // Query for each rank
        for (int j = 0; j < candidate_count; j++)
        {
            string name = get_string("Rank %i: ", j + 1);

            // Record vote, unless it's invalid
            if (!vote(i, j, name))
            {
                printf("Invalid vote.\n");
                return 4;
            }
        }

        printf("\n");
    }



    // Keep holding runoffs until winner exists
    while (true)
    {
        // Calculate votes given remaining candidates
        tabulate();

        // Check if election has been won
        bool won = print_winner();
        if (won)
        {
            break;
        }

        // Eliminate last-place candidates
        int min = find_min();
        bool tie = is_tie(min);

        // If tie, everyone wins
        if (tie)
        {
            for (int i = 0; i < candidate_count; i++)
            {
                if (!candidates[i].eliminated)
                {
                    printf("%s\n", candidates[i].name);
                }
            }
            break;
        }

        // Eliminate anyone with minimum number of votes
        eliminate(min);

        // Reset vote counts back to zero
        for (int i = 0; i < candidate_count; i++)
        {
            candidates[i].votes = 0;
        }
    }
    return 0;
}

// Record preference if vote is valid
bool vote(int voter, int rank, string name)
{
    // TODO
    for (int i = 0; i < candidate_count; i++)
    {
        if (strcmp (candidates[i].name, name) == 0)
        //將candidates入面的name與用戶輸入的name與逐個對比, 睇i到邊個字時會對倒同name一樣
        {
            //如果一樣就把voter及rank放入下面的[ ](即係 // Keep querying for votes),
            // i 會用來代入candidates[].name度, 代表candidates的序號
            preferences[voter][rank] = i;
            return true;
        }
    }
    return false;
    //If I am the first voter, and I want to vote for Charlie as my number one preference, then we have to set my preference for number one
    //as Charlie, which we do by saying:

    //preferences[0][0] = 2

    //The first number in square brackets is zero because I am the first voter;
    //the second number is also zero because I am voting my number one rank;
    //it is equal to two because Charlie is the third candidate

}

// Tabulate votes for non-eliminated candidates
void tabulate(void)
{
    // TODO
    // loop throught 個矩陣one by one, 如果個參選人沒有被foul, vote+1
    for (int i = 0; i < voter_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            if (candidates[preferences[i][j]].eliminated == false)
            {
                candidates[preferences[i][j]].votes++;
                break;
                //當第一個投票人的第一個選擇(即preferences[0][0]被foul,
                //votes不會加, 輪到preferences[0][1], 如果沒有被foul,
                //votes有得加, 由於第一個投票人的沒有被foul的第一順位已經加左票數
                //因此沒有需要加preferences[0][2],即第一個投票人的第三選擇
                //必須記得呢個programe只需要計邊個/邊幾個係第一名
                //所以計左投票人的第一順位哥票之後要break,
                //作用是為了唔計第一個投票人的第三選擇的票數
            }


        }
    }
    return;
}

// Print the winner of the election, if there is one
bool print_winner(void)
{
    // TODO
    for (int i = 0; i < candidate_count; i++)
    {
        if (candidates[i].votes > voter_count/2)
        {
            printf("%s\n", candidates[i].name);
            return true;
            //break 是沒有用的以及什麼也沒有(只有print)的話, 會不斷顯示winner的結果,
            //呢個時候需要用ctrl + `
        }
    }


    return false;
}

// Return the minimum number of votes any remaining candidate has
int find_min(void)
{
    // TODO
    int min = voter_count;
    for (int i = 0; i < candidate_count; i++)
    {
        if (candidates[i].votes < min && candidates[i].eliminated == false)
        {
            min = candidates[i].votes;
        }
    }

    return min;
    //唔係return 0, 而係要return返個min 個數出嚟
}

// Return true if the election is tied between all candidates, false otherwise
//全部沒有被foul的參賽者都得到相同票數就有tie,
//所以這個相同票數會成為min(即最低票敐),
//擁有最低票數參賽者的數量 = 沒有被淘汰參賽者的數量
bool is_tie(int min)
{
    // TODO
    int minvote = 0;
    for (int i = 0; i < candidate_count; i++)
    {
         if (candidates[i].votes == min)
             minvote++;
    }

    int noteliminated = 0;
    for (int i = 0; i < candidate_count; i++)
    {
        if (!candidates[i].eliminated)
        {
            noteliminated++;
        }
    }

    if (minvote == noteliminated )
    {
        return true;
    }

    return false;
}

// Eliminate the candidate (or candidates) in last place
void eliminate(int min)
{
    // TODO
    for (int i = 0; i < candidate_count; i++)
    {
         if (candidates[i].votes == min)
         {
            candidates[i].eliminated = true;
         }
    }
    return;
}
